
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package projetoPT3;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\011\000\002\007\015\000\002\010\011\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\004\000\002\013\006\000\002\014\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\005\000\002\017\004\000\002\017\003\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\016\004\016\005\013\006\022\007\020\032" +
    "\006\034\021\001\002\000\004\002\111\001\002\000\004" +
    "\010\ufff4\001\002\000\004\015\077\001\002\000\022\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\032\ufffb" +
    "\034\ufffb\001\002\000\022\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\012\ufffa\032\ufffa\034\ufffa\001\002\000\004" +
    "\010\ufff5\001\002\000\004\010\ufff3\001\002\000\004\004" +
    "\uffef\001\002\000\004\004\074\001\002\000\022\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\032\ufffc\034" +
    "\ufffc\001\002\000\004\035\072\001\002\000\022\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe\032\ufffe\034" +
    "\ufffe\001\002\000\004\004\uffed\001\002\000\004\015\031" +
    "\001\002\000\004\004\uffee\001\002\000\022\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\032\ufff9\034\ufff9" +
    "\001\002\000\020\004\016\005\013\006\022\007\020\010" +
    "\027\032\006\034\021\001\002\000\004\010\026\001\002" +
    "\000\022\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012" +
    "\ufffd\032\ufffd\034\ufffd\001\002\000\004\002\000\001\002" +
    "\000\022\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\012" +
    "\uffff\032\uffff\034\uffff\001\002\000\014\004\032\015\036" +
    "\017\034\020\037\021\033\001\002\000\026\010\uffea\016" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\001\002\000\026\010\uffe9\016\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\001\002\000\026\010\uffec\016\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\001\002\000\024\016\066\022\053\023\045\024\050\025" +
    "\042\026\047\027\044\030\046\031\051\001\002\000\014" +
    "\004\032\015\036\017\034\020\037\021\033\001\002\000" +
    "\026\010\uffeb\016\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\001\002\000\024\016" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\001\002\000\024\016\043\022\053\023" +
    "\045\024\050\025\042\026\047\027\044\030\046\031\051" +
    "\001\002\000\034\004\032\015\036\017\034\020\037\021" +
    "\033\022\053\023\045\024\050\025\042\026\047\027\044" +
    "\030\046\031\051\001\002\000\026\010\uffe8\016\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\001\002\000\034\004\032\015\036\017\034\020" +
    "\037\021\033\022\053\023\045\024\050\025\042\026\047" +
    "\027\044\030\046\031\051\001\002\000\034\004\032\015" +
    "\036\017\034\020\037\021\033\022\053\023\045\024\050" +
    "\025\042\026\047\027\044\030\046\031\051\001\002\000" +
    "\034\004\032\015\036\017\034\020\037\021\033\022\053" +
    "\023\045\024\050\025\042\026\047\027\044\030\046\031" +
    "\051\001\002\000\034\004\032\015\036\017\034\020\037" +
    "\021\033\022\053\023\045\024\050\025\042\026\047\027" +
    "\044\030\046\031\051\001\002\000\034\004\032\015\036" +
    "\017\034\020\037\021\033\022\053\023\045\024\050\025" +
    "\042\026\047\027\044\030\046\031\051\001\002\000\034" +
    "\004\032\015\036\017\034\020\037\021\033\022\053\023" +
    "\045\024\050\025\042\026\047\027\044\030\046\031\051" +
    "\001\002\000\024\016\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\001\002\000\034" +
    "\004\032\015\036\017\034\020\037\021\033\022\053\023" +
    "\045\024\050\025\042\026\047\027\044\030\046\031\051" +
    "\001\002\000\024\016\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\001\002\000\024" +
    "\016\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\001\002\000\024\016\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\001\002\000\024\016\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\001\002\000" +
    "\024\016\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\001\002\000\024\016\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\001\002\000\024\016\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\001\002" +
    "\000\024\016\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\001\002\000\024\016\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\001\002\000\024\016\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\001" +
    "\002\000\004\011\067\001\002\000\016\004\016\005\013" +
    "\006\022\007\020\032\006\034\021\001\002\000\020\004" +
    "\016\005\013\006\022\007\020\012\071\032\006\034\021" +
    "\001\002\000\022\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\012\ufff6\032\ufff6\034\ufff6\001\002\000\014\004\032" +
    "\015\036\017\034\020\037\021\033\001\002\000\004\010" +
    "\ufff0\001\002\000\006\010\ufff2\035\075\001\002\000\014" +
    "\004\032\015\036\017\034\020\037\021\033\001\002\000" +
    "\004\010\ufff1\001\002\000\014\004\032\015\036\017\034" +
    "\020\037\021\033\001\002\000\024\016\101\022\053\023" +
    "\045\024\050\025\042\026\047\027\044\030\046\031\051" +
    "\001\002\000\004\011\102\001\002\000\016\004\016\005" +
    "\013\006\022\007\020\032\006\034\021\001\002\000\020" +
    "\004\016\005\013\006\022\007\020\012\104\032\006\034" +
    "\021\001\002\000\024\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\012\ufff8\032\ufff8\033\105\034\ufff8\001\002\000" +
    "\004\011\106\001\002\000\016\004\016\005\013\006\022" +
    "\007\020\032\006\034\021\001\002\000\020\004\016\005" +
    "\013\006\022\007\020\012\110\032\006\034\021\001\002" +
    "\000\022\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012" +
    "\ufff7\032\ufff7\034\ufff7\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\032\002\003\003\023\004\016\005\014\006" +
    "\006\007\007\010\022\011\024\012\010\013\004\014\011" +
    "\016\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\027\005\014\006\006\007\007" +
    "\010\022\011\024\012\010\013\004\014\011\016\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\037\017\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\051\001\001\000\006\015\037\017\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\051\001\001" +
    "\000\010\015\054\020\055\021\064\001\001\000\002\001" +
    "\001\000\010\015\054\020\055\021\063\001\001\000\010" +
    "\015\054\020\055\021\062\001\001\000\010\015\054\020" +
    "\055\021\061\001\001\000\010\015\054\020\055\021\060" +
    "\001\001\000\010\015\054\020\055\021\057\001\001\000" +
    "\010\015\054\020\055\021\056\001\001\000\002\001\001" +
    "\000\010\015\054\020\055\021\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\067\004\016\005\014\006\006\007" +
    "\007\010\022\011\024\012\010\013\004\014\011\016\013" +
    "\001\001\000\026\004\027\005\014\006\006\007\007\010" +
    "\022\011\024\012\010\013\004\014\011\016\013\001\001" +
    "\000\002\001\001\000\004\015\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\075\001\001\000\002" +
    "\001\001\000\006\015\037\017\077\001\001\000\004\020" +
    "\051\001\001\000\002\001\001\000\030\003\102\004\016" +
    "\005\014\006\006\007\007\010\022\011\024\012\010\013" +
    "\004\014\011\016\013\001\001\000\026\004\027\005\014" +
    "\006\006\007\007\010\022\011\024\012\010\013\004\014" +
    "\011\016\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\106\004\016\005\014\006\006\007\007\010" +
    "\022\011\024\012\010\013\004\014\011\016\013\001\001" +
    "\000\026\004\027\005\014\006\006\007\007\010\022\011" +
    "\024\012\010\013\004\014\011\016\013\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	public void report_error(String message, Object info) {
		System.out.println("Warning - " + message);
		System.out.println("Warning - " + info);
		
	}

	public void report_fatal_error (String	message, Object info) {
		System.out.println("Error - " + message);
		System.out.println("Warning - " + info);
		System.exit(-1);
		
	}
	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= CMDS cf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CMDS ::= CMDS CMD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CMDS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CMDS ::= CMD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CMDS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CMD ::= VAR cf 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CMD",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CMD ::= FUNC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CMD",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNC ::= FUNC_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNC ::= FUNC_ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNC ::= FUNC_WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNC_IF ::= deu AbreParentese EXPRESSAO FechaParentese AbreChaves CMDS FechaChaves 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_IF",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNC_ELSE ::= deu AbreParentese EXPRESSAO FechaParentese AbreChaves CMDS FechaChaves deuN AbreChaves CMDS FechaChaves 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_ELSE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNC_WHILE ::= efvLoop AbreParentese EXPRESSAO FechaParentese AbreChaves CMDS FechaChaves 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNC_WHILE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VAR ::= DEC_VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VAR ::= DEC_VAR_ATT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VAR ::= ATT_VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEC_VAR ::= TIPOS_DE_DADOS Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_VAR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEC_VAR_ATT ::= TIPOS_DE_DADOS Id Att TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEC_VAR_ATT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATT_VAR ::= Id Att TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATT_VAR",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOS_DE_DADOS ::= Zint 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DADOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOS_DE_DADOS ::= Rfloat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DADOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOS_DE_DADOS ::= Txt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS_DE_DADOS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= inteiro 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= flutuante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= Id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= Cadeia_de_Caracteres 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= AbreParentese EXPRESSAO FechaParentese 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESSAO ::= EXPRESSAO OPERACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESSAO ::= TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACAO ::= compIg EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACAO ::= add EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACAO ::= subt EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACAO ::= mult EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACAO ::= div EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERACAO ::= exp EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACAO ::= Maior EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERACAO ::= Menor EXPRESSAO2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERACAO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESSAO2 ::= OPERACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESSAO2 ::= TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
